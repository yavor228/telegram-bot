# Install the required package: python-telegram-bot
# pip install python-telegram-bot --upgrade

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import sqlite3
import os
import random
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise EnvironmentError("BOT_TOKEN not found in environment variables. Please check your .env file.")

DATE, TYPE, DURATION = range(3)

MOTIVATION_LIST = [
    "–ù–µ –∑—É–ø–∏–Ω—è–π—Å—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∞–∂–∫–æ.",
    "–¢–≤–æ—î —Ç—ñ–ª–æ –ø—Ä–∞—Ü—é—î ‚Äî —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏.",
    "–ö–æ–∂–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–±–ª–∏–∂–∞—î —Ç–µ–±–µ –¥–æ –º–µ—Ç–∏.",
    "–ó—Ä–æ–±–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–µ, –∑–∞ —â–æ –∑–∞–≤—Ç—Ä–∞ –ø–æ–¥—è–∫—É—î—à —Å–æ–±—ñ.",
    "–°–∏–ª–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—ñ ‚Äî –Ω–µ –∑–¥–∞–≤–∞–π—Å—è."
]

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["‚ûï –î–æ–¥–∞—Ç–∏", "üìã –û—Å—Ç–∞–Ω–Ω—ñ"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí° –ú–æ—Ç–∏–≤–∞—Ü—ñ—è"],
        ["üóë –û—á–∏—Å—Ç–∏—Ç–∏"]
    ],
    resize_keyboard=True
)

def init_db():
    conn = sqlite3.connect("trainings.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS trainings (
            user_id INTEGER,
            date TEXT,
            type TEXT,
            duration INTEGER
        )
    ''')
    conn.commit()
    conn.close()

init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=keyboard
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä. 2025-05-20):")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    await update.message.reply_text("üèãÔ∏è –¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:")
    return TYPE

async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['type'] = update.message.text
    await update.message.reply_text("‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö:")
    return DURATION

async def get_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return DURATION

    user_id = update.message.from_user.id
    date = context.user_data['date']
    type_ = context.user_data['type']

    conn = sqlite3.connect("trainings.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO trainings (user_id, date, type, duration) VALUES (?, ?, ?, ?)",
        (user_id, date, type_, duration)
    )
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=keyboard)
    return ConversationHandler.END

async def list_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect("trainings.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT date, type, duration FROM trainings WHERE user_id = ? ORDER BY date DESC LIMIT 5",
        (user_id,)
    )
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")
        return

    msg = "üìã –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n"
    for row in rows:
        msg += f"{row[0]} ‚Äî {row[1]}, {row[2]} —Ö–≤\n"
    await update.message.reply_text(msg)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect("trainings.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*), SUM(duration) FROM trainings WHERE user_id = ?", (user_id,))
    total, minutes = cursor.fetchone()
    cursor.execute("SELECT type, COUNT(*) FROM trainings WHERE user_id = ? GROUP BY type", (user_id,))
    by_type = cursor.fetchall()
    conn.close()

    msg = f"üìä –í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {total or 0}\nüïí –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {minutes or 0} —Ö–≤\n"
    if by_type:
        msg += "\n–¢–∏–ø–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:\n"
        for t, c in by_type:
            msg += f"‚Äì {t}: {c}\n"
    await update.message.reply_text(msg)

async def motivate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üí° {random.choice(MOTIVATION_LIST)}")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect("trainings.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM trainings WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    await update.message.reply_text("üóë –í—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ûï –î–æ–¥–∞—Ç–∏":
        return await add(update, context)
    elif text == "üìã –û—Å—Ç–∞–Ω–Ω—ñ":
        return await list_trainings(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await stats(update, context)
    elif text == "üí° –ú–æ—Ç–∏–≤–∞—Ü—ñ—è":
        return await motivate(update, context)
    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç–∏":
        return await clear(update, context)
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏$"), add)],
        states={
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
            DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == '__main__':
    main()
